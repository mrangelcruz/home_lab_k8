---
- name: Setup Kubernetes Worker Node
  hosts: k8s_workers
  become: yes
  vars:
    k8s_version: "1.29"  # Change to match your cluster version
  
  pre_tasks:
    - name: Generate join command on control plane
      shell: kubeadm token create --print-join-command
      register: join_command_raw
      delegate_to: "{{ groups['k8s_control_plane'][0] }}"
      run_once: true
      become: yes
    
    - name: Show the join command
      debug:
        msg: "{{ join_command_raw.stdout }}"

    - name: Set join command fact
      set_fact:
        join_command: "{{ join_command_raw.stdout }}"
      run_once: true
  
  tasks:
    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^/#/' /etc/fstab
      
    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
    
    - name: Make kernel modules persistent
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
    
    - name: Set sysctl parameters
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }
    
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes
    
    - name: Install containerd
      apt:
        name: containerd
        state: present
    
    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
    
    - name: Generate default containerd config
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml
    
    - name: Configure containerd to use systemd cgroup driver
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s+SystemdCgroup = false'
        line: '            SystemdCgroup = true'
        backrefs: yes
    
    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes
    
    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
    
    - name: Add Kubernetes apt key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
    - name: Add Kubernetes apt repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /"
        state: present
        filename: kubernetes
    
    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes
    
    - name: Hold Kubernetes packages at current version
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    
    - name: Check if kubelet.conf exists to determine if reset is needed
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_stat

    - name: Reset Kubernetes component if it was ever installed
      shell: kubeadm reset --force
      when: kubelet_conf_stat.stat.exists

    - name: Join Kubernetes cluster
      shell: "{{ join_command }}"
      args:
        creates: /etc/kubernetes/kubelet.conf